<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	
	<!-- ==================================================================== 실행환경 프로필 설정 ======================================================================================= -->
    <!-- 파일명에 '-spring'을 명시해야 프로필 설정 가능 -->
    <springProfile name="loc, dev, rel_1, rel_2">
        <property resource="application.properties" />
    </springProfile>

    <!-- log 변수 값 설정 -->
    <springProperty name="LOG_PATH" source= "log.config.path" />
    <springProperty name="LOG_FILE_NAME" source= "log.config.filename" />
    <springProperty name="LOG_MAX_HISTORY" source= "log.config.maxHistory" />
    <springProperty name="LOG_TOTAL_SIZE_CAP" source= "log.config.totalSizeCap" />
    
	
	
	<!-- ==================================================================== 로그 콘솔 출력 설정 ======================================================================================= -->
	<!-- 로그 패턴에 색상 적용 %clr(pattern){color} -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

    <!-- 로컬 콘솔에서 로그 패컨(컬러사용) -->
    <property name="CONSOLE_LOG_PATTERN"
              value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative]  %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n"
    />

    <!-- 콘솔(STDOUT) -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
        </layout>
        
        <!-- 특정 문자열(NOT_SQL_LOG)이 포함된 로그는 로깅에서 제외 -->
	    <filter class="com.seize.api.config.LogbackFilter"/>
    </appender>
    

    <!-- ====================================================================== 로그 파일 설정 =========================================================================================== -->
     <!-- log 파일 기록 절대 위치 설정 -->
    <property name="LOGS_ABSOLUTE_PATH" value="./logs" />
    
    <!--로그파일의 로그 패턴-->
    <property name="FILE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %-40.40logger{36} : %msg%n"/>

	<!-- 파일(FILE) -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--     log 기록할 파일 위치 설정 -->
        <file>${LOGS_ABSOLUTE_PATH}/${LOG_FILE_NAME}.log</file>
        <!--     log 기록 타입 인코딩 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
    </appender>
    
    
    
    <!-- ====================================================================== Spring Profile별 로그 설정 ================================================================================ -->
    <!--LOCAL 환경-->
     <springProfile name="loc">
        <root level="info">
            <!--     참조할 appender - STDOUT -->
            <appender-ref ref="STDOUT" />
        </root>
        <!-- log 파일 레벨 설정 (org.springframework.web=debug)-->
        <logger name="org.springframework.web" level="debug">
        	<!--     참조할 appender - FILE -->
        	<appender-ref ref="FILE" />
    	</logger>
    </springProfile>
    
    <!--DEV 환경-->   
    <springProfile name="dev">
        <root level="debug">
            <appender-ref ref="STDOUT" />
        </root>
        <logger name="org.springframework.web" level="debug">
            <appender-ref ref="FILE" />
        </logger>
    </springProfile>
    
    <!--RELEASE 환경  -->
    <springProfile name="rel_1, rel_2">
        <root level="info">
            <appender-ref ref="STDOUT" />
        </root>
        <logger name="org.springframework.web" level="debug">
            <appender-ref ref="FILE" />
        </logger>
    </springProfile>        



    <!-- ====================================================================== JDBC 로그 설정 ================================================================================ -->
    
    <!--   
	jdbc.connection		: 열려있는 모든 번호와 연결 수립 및 해제 이벤트를 기록. 이는 연결 문제를 찾아내는데 매우 유용 (Connection Pool 설정)
	
	jdbc.audit			: ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
	
	jdbc.resultset		: ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
	
	jdbc.sqlonly		: SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. (원래는 ? 로 표시되는데, log4j 덕분에 완전한 쿼리로 보여지는 것임)
	
	jdbc.resultsettable	: SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	
	jdbc.sqltiming		: SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
	-->
    <logger name="jdbc" level="off"/>
    <logger name="jdbc.sqlonly" level="off"/>
    <logger name="jdbc.audit" level="off"/>
    <logger name="jdbc.resultset" level="off"/>
    <logger name="jdbc.connection" level="off"/>
    <logger name="jdbc.sqltiming" level="debug">
    	<!-- 로그 파일에 기록 설정 -->
    	<appender-ref ref="FILE"/>
    </logger>
    <logger name="jdbc.resultsettable" level="debug">
    	<appender-ref ref="FILE"/>
    </logger>
    
</configuration>